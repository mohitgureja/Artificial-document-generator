import random
import textwrap

from PIL import Image, ImageFont, ImageDraw

from data_renderer import helper, tableService

POSITION_CONFIG_FILE_PATH = "data/input/renderer/position_config.json"


def generate_textimage(data, fields, style_config_data):
    """
    Render image according to the data and field_config provided
    :param data:
    :param fields:
    :param style_config_data:
    :return:
    """
    position_config_data = helper.read_json(POSITION_CONFIG_FILE_PATH)

    # Image size
    width_img, height_img = 2480, 3508
    img = Image.new('RGB', (width_img, height_img), "white")
    img_draw = ImageDraw.Draw(img)

    ground_truth = {}

    for block in position_config_data.keys():
        block = position_config_data[block]
        if block["hasTable"]:
            img, ground_truth = tableService.draw_table(block, style_config_data, img, ground_truth, data)
        if "data_fields" in block:
            x1 = random.randint(block["position"]["x1"], block["position"]["x2"])
            y1 = random.randint(block["position"]["y1"], block["position"]["y2"])

            w, h = 0, 0
            for data_field in block["data_fields"]:
                direction = block["direction"]
                field = block["data_fields"][data_field]

                # Check if data is generated by generator
                if data_field not in fields:
                    continue
                text = data[data_field]

                # If field has a key name
                if field["key"]:
                    text = get_keytext(field, text)

                # Get style configurations
                field_config = style_config_data[data_field]
                font = get_font(field_config)

                # If field value is a list of strings
                if field["isList"]:
                    text = "\n".join(text)

                # If a field has dependency on a previous rendered field
                if field["has_dependent_field"]:
                    direction = field["key_direction"]
                    x1 = ground_truth[field["previous_key"]]["x1"]
                    y1 = ground_truth[field["previous_key"]]["y1"]
                    h = ground_truth[field["previous_key"]]["y2"] - y1
                    w = ground_truth[field["previous_key"]]["x2"] - x1

                if direction == "down":
                    y1 = y1 + field_config["margin-top"] + h
                    h = 0
                elif direction == "right":
                    x1 = x1 + field_config["margin-left"] + w
                    h = 0

                w = field_config["width"]

                split_text = str(text).split("\n")
                for text_line in split_text:
                    wrapped_text = textwrap.wrap(text_line, width=w)
                    for line in wrapped_text:
                        img_draw.text((x1, y1 + h), str(line), fill=(0, 0, 0), font=font)
                        h += font.getsize(line)[1]
                    h += 10

                # Ground Truth Data for each field
                ground_truth[data_field] = {"content": text, "x1": x1, "x2": x1 + w, "y1": y1, "y2": y1 + h}
    return img, ground_truth


def get_font(field_config):
    font = ImageFont.truetype(field_config["font"], size=field_config["font_size"])
    return font


def get_keytext(field, text):
    field_direction = field["key_direction"]
    # TODO: Not generic (Need to generalize it to every field)
    keyname = random.choice(field["key_name"])
    if field_direction == "top":
        text = keyname + "\n" + str(text)
    elif field_direction == "left":
        text = keyname + str(text)
    return text
